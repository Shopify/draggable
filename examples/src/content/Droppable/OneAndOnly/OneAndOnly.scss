////
/// Content
/// OneAndOnly
////

@import 'components/Patterns/props';

$grid-area-names: a, b, c, d, e, f, g, h;
$grid-rows: 6;
$grid-columns: 4;

.OneAndOnly {
  .BlockLayout {
    .BlockWrapper {
      .Block:nth-child(1n+3) {
        min-height: 0;
        height: 0;
      }
    }
  }

  .BlockLayout--typeFlex {
    .BlockWrapper {
      flex: 1 1 calc(50% - #{get-layout-length(gutter)});

      @media screen and (min-width: get-breakpoint(mobile, wide)) {
        flex-basis: calc(25% - #{get-layout-length(gutter)});
      }
    }
  }

  .BlockLayout--typeGrid {
    grid-template-rows: repeat($grid-rows, 1fr);
    grid-template-columns: repeat($grid-columns, 1fr);
    grid-template-areas:
      'a a b b'
      'a a d d'
      'c c d d'
      'e e f f'
      'e e g g'
      'h h h h';
    margin-top: get-border(thin);
    border: get-border(thin) solid get-color(coal, dark);
    background-color: get-color(coal, dark);

    @media screen and (min-width: get-breakpoint(tablet)) {
      // special fractions to line up with the flexContainer
      grid-template-columns: 1fr 1.025fr 1.025fr 1fr;
      grid-template-areas:
        'a c c g'
        'a c c g'
        'a d f g'
        'b d f g'
        'b e f h'
        'b e f h';
      margin-top: get-border();
      border-width: get-border();
    }

    .BlockWrapper--isDroppable {
      &::before {
        content: '';
        position: absolute;
        top: -(get-border(thin));
        right: -(get-border(thin));
        bottom: -(get-border(thin));
        left: -(get-border(thin));
        display: block;
        pointer-events: none;
        background-color: get-color(brand, blue);
        opacity: 0;
        transition: opacity get-duration(fast) get-easing();

        @media screen and (min-width: get-breakpoint(tablet)) {
          top: -(get-border());
          right: -(get-border());
          bottom: -(get-border());
          left: -(get-border());
        }
      }

      // not focusable, but, whatever... this was hard to solve
      &.draggable-droppable--occupied:hover {
        &::before {
          opacity: 1;
        }
      }
    }

    .BlockContent {
      border: 0;
    }

    @for $i from 1 through length($grid-area-names) {
      .BlockWrapper:nth-child(#{$i}) {
        grid-area: nth($grid-area-names, $i);
      }
    }
  }

  .BlockContent {
    @media screen and (min-width: get-breakpoint(tablet)) {
      min-height: columns() * 1.5;
    }

    @media screen and (min-width: get-breakpoint(desktop)) {
      min-height: columns(2);
    }
  }
}

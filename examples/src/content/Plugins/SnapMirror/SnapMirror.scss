////
/// Content
/// SnapMirror
////

@import 'utils/shared/functions';
@import 'utils/shared/layout';

.SnapMirror {
  .Workspace {
    &.BlockLayout--typePositioned {
      height: 32rem;
      border: 0.6rem solid #212529;
      overflow: auto;

      .Block {
        width: 150px;
        height: 150px;
        position: absolute;
      }
      &.draggable-container--over {
        .Workspace__grid {
          $size: 50px;
          $border-width: 0.3rem;
          background: linear-gradient(180deg, #00f 0, #00f $border-width, transparent 0, transparent $size) 0px 0px /
              100% $size repeat-y,
            linear-gradient(90deg, #00f 0, #00f $border-width, transparent 0, transparent $size) 0px 0px / #{$size} 100%
              repeat-x;
        }
      }
    }

    &__grid {
      $size: 50px;
      $border-width: 0.3rem;
      width: 1500px;
      height: 1000px;
      background: linear-gradient(180deg, #000 0, #000 $border-width, transparent 0, transparent $size) 0px 0px / 100%
          $size repeat-y,
        linear-gradient(90deg, #000 0, #000 $border-width, transparent 0, transparent $size) 0px 0px / #{$size} 100% repeat-x;
    }
  }

  .MLP {
    &.BlockLayout--typePositioned {
      height: 64rem;
      border: 0.6rem solid #212529;
      overflow: auto;

      .Block--isDraggable {
        width: 50px;
        height: 50px;
        position: absolute;
        z-index: 2;
      }

      $colors: purple palegoldenrod silver pink orange aqua;
      $i: 0;
      @each $color in $colors {
        $i: $i + 1;
        .Block--isDraggable:nth-child(#{$i}) {
          .BlockContent {
            border-color: $color;
          }
        }
      }

      .Hollow-wrapper {
        position: relative;
        height: 500px;
        .Block--typeHollow {
          width: 50px;
          height: 50px;
          position: absolute;
          top: 50%;
          left: 50%;
        }

        @for $i from 0 to 6 {
          .Block--typeHollow:nth-child(#{$i + 1}) {
            transform: rotate($i * 60deg) translateX(200px) rotate($i * -60deg);
          }
        }
      }
    }
  }
}
